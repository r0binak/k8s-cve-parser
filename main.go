package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
)

const (
	cveFeedURL = "https://kubernetes.io/docs/reference/issues-security/official-cve-feed/index.json"
	outputDir  = "cves"
)

type CVEDetails struct {
	Authors     []Author  `json:"authors"`
	Description string    `json:"description"`
	FeedURL     string    `json:"feed_url"`
	Items       []CVEItem `json:"items"`
}

type Author struct {
	Name string `json:"name"`
	URL  string `json:"url"`
}

type CVEItem struct {
	ID            string  `json:"id"`
	Summary       string  `json:"summary"`
	Description   string  `json:"content_text"`
	DatePublished string  `json:"date_published"`
	ExternalURL   string  `json:"external_url"`
	URL           string  `json:"url"`
	K8SInfo       K8SInfo `json:"_kubernetes_io"`
}

type K8SInfo struct {
	GoogleGroupURL string `json:"google_group_url"`
	IssueNumber    int    `json:"issue_number"`
}

func main() {
	err := ensureOutputDirExists()
	if err != nil {
		fmt.Println("Error creating directory", err)
		return
	}

	err = processCVEFeed()
	if err != nil {
		fmt.Println("Error:", err)
	}
}

func ensureOutputDirExists() error {
	_, err := os.Stat(outputDir)
	if os.IsNotExist(err) {
		err = os.Mkdir(outputDir, os.ModePerm)
		if err != nil {
			return err
		}
	}
	return nil
}

func processCVEFeed() error {
	response, err := http.Get(cveFeedURL)
	if err != nil {
		return err
	}
	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {

		}
	}(response.Body)

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return err
	}

	var cveDetails CVEDetails
	err = json.Unmarshal(body, &cveDetails)
	if err != nil {
		return err
	}

	for _, item := range cveDetails.Items {
		cveJSON, err := json.MarshalIndent(item, "", "  ")
		if err != nil {
			fmt.Println("Error:", err)
			continue
		}

		cveFilename := filepath.Join(outputDir, fmt.Sprintf("%s.json", item.ID))
		err = os.WriteFile(cveFilename, cveJSON, 0644)
		if err != nil {
			fmt.Println("Error:", err)
			continue
		}

		fmt.Printf("Saved CVE data for %s to %s\n", item.ID, cveFilename)
	}

	return nil
}
